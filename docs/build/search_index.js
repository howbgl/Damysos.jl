var documenterSearchIndex = {"docs":
[{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = Damysos","category":"page"},{"location":"index.html#Damysos","page":"Home","title":"Damysos","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for Damysos.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [Damysos]","category":"page"},{"location":"index.html#Damysos.Ensemble","page":"Home","title":"Damysos.Ensemble","text":"Ensemble{T}(simlist, id, datapath, plotpath)\n\nA struct representing an ensemble of simulations.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.GaussianAPulse","page":"Home","title":"Damysos.GaussianAPulse","text":"GaussianAPulse{T<:Real}\n\nRepresents spacially homogeneous, linearly polarized pulse with Gaussian envelope. \n\nMathematical form\n\nThe form of the vector potential is given by\n\nvecA(t) = vecA_0 cos(omega t) e^-t^2  sigma^2\n\nwhere vecA_0=A_0(cosvarphivece_x + sinvarphivece_y). \n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.GaussianEPulse","page":"Home","title":"Damysos.GaussianEPulse","text":"GaussianEPulse{T<:Real}\n\nRepresents spacially homogeneous, linearly polarized pulse with Gaussian envelope. \n\nMathematical form\n\nThe form of the electric field is given by\n\nvecE(t) = vecE_0 sin(omega t+phi) e^-t^2  sigma^2\n\nwhere vecE_0=E_0(cosvarphivece_x + sinvarphivece_y). \n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.Simulation","page":"Home","title":"Damysos.Simulation","text":"Simulation{T}(hamiltonian, drivingfield, numericalparams, observables, unitscaling, dimensions, id, datapath, plotpath)\n\nA struct representing a simulation with various components.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.UnitScaling","page":"Home","title":"Damysos.UnitScaling","text":"UnitScaling(timescale,lengthscale)\n\nRepresents a physical length- and time-scale used for non-dimensionalization of a system.\n\nExamples\n\njulia> using Unitful; us = UnitScaling(u\"1.0s\",u\"1.0m\")\nUnitScaling\n    timescale: 1.0e15 fs\n    lengthscale: 1.0e9 nm\n\n\nFurther information\n\nSee here\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.run_simulation!-Union{Tuple{Ensemble{T}}, Tuple{T}} where T<:Real","page":"Home","title":"Damysos.run_simulation!","text":"run_simulation!(ens::Ensemble;\n    savedata=true,\n    saveplots=true,\n    ensembleparallel=false,\n    threaded=false,\n    maxparallel_ky=64,\n    kxbatch_basesize=512,\n    makecombined_plots=true,\n    kwargs...)\n\nRun simulations for an ensemble of sim objects.\n\nArguments\n\nens::Ensemble: See Ensemble\nmaxparallel_ky: The maximum amount of different ky-lines computed in parallel. Good values are typically ~ 2nworkers. Large numbers mean high memory footprint.\nkxbatch_basesize : Number of kx modes per ky-line processed in one solve call. Large numbers mean high memory footprint.\nkwargs...: Additional keyword arguments are passed to the solve() function of DifferentialEquations.jl\n\nReturns\n\nAn array of observables obtained from the simulations.\n\nSee also\n\nrun_simulation2d!, run_simulation!\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.run_simulation!-Union{Tuple{Simulation{T}}, Tuple{T}} where T<:Real","page":"Home","title":"Damysos.run_simulation!","text":"run_simulation!(sim::Simulation;\n    savedata=true,\n    saveplots=true,\n    threaded=false,\n    maxparallel_ky=64,\n    kxbatch_basesize=512,\n    kwargs...)\n\nRun a simulation.\n\nArguments\n\nsim::Simulation: See Simulation\nmaxparallel_ky: The maximum amount of different ky-lines computed in parallel. Good values are typically ~ 2nworkers. Large numbers mean high memory footprint.\nkxbatch_basesize : Number of kx modes per ky-line processed in one solve call. Large numbers mean high memory footprint.\nkwargs...: Additional keyword arguments are passed to the solve() function of DifferentialEquations.jl\n\nReturns\n\nThe observables obtained from the simulation.\n\nSee also\n\nrun_simulation1d!, run_simulation2d!\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.run_simulation1d!-Union{Tuple{Simulation{T}}, Tuple{T}, Tuple{Simulation{T}, T}} where T<:Real","page":"Home","title":"Damysos.run_simulation1d!","text":"run_simulation1d!(sim::Simulation{T};kwargs...)\n\nRun a 1D simulation for a given Simulation sim.\n\nThis function should not be called by a user, since it has no convenience features such as saving and plotting. Use run_simulation! instead\n\nReturns\n\nThe combined observables obtained from the simulation.\n\nSee also\n\nrun_simulation!, run_simulation2d!\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.run_simulation2d!-Tuple{Simulation}","page":"Home","title":"Damysos.run_simulation2d!","text":"run_simulation2d!(sim::Simulation{T};kwargs...)\n\nRun a 2D simulation for a given Simulation sim.\n\nThis function should not be called by a user, since it has no convenience features such as saving and plotting. Use run_simulation! instead\n\nReturns\n\nThe combined observables obtained from the simulation.\n\nSee also\n\nrun_simulation!, run_simulation1d!\n\n\n\n\n\n","category":"method"}]
}
