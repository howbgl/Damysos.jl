var documenterSearchIndex = {"docs":
[{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = Damysos","category":"page"},{"location":"index.html#Damysos","page":"Home","title":"Damysos","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for Damysos.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [Damysos]","category":"page"},{"location":"index.html#Damysos.Ensemble","page":"Home","title":"Damysos.Ensemble","text":"Ensemble{T}(simlist, id, datapath, plotpath)\n\nA struct representing an ensemble of simulations.\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.GappedDirac","page":"Home","title":"Damysos.GappedDirac","text":"GappedDirac{T<:Real} <: GeneralTwoBand{T}\n\nHolds the parameter of a dimensionless massive Dirac Hamiltonian.\n\nThe Hamiltonian reads \n\nhatH = k_xsigma_x + k_ysigma_y + msigma_z\n\nsuch that vech=k_xk_ym.\n\nExamples\n\njulia> h = GappedDirac(1.0)\nGappedDirac:\n m: 1.0\n vF: 1.0\n\n\n\nSee also\n\nGeneralTwoBand\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.GaussianAPulse","page":"Home","title":"Damysos.GaussianAPulse","text":"GaussianAPulse{T<:Real}\n\nRepresents spacially homogeneous, linearly polarized pulse with Gaussian envelope. \n\nMathematical form\n\nThe form of the vector potential is given by\n\nvecA(t) = vecA_0 cos(omega t) e^-t^2  sigma^2\n\nwhere vecA_0=A_0(cosvarphivece_x + sinvarphivece_y). \n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.GaussianEPulse","page":"Home","title":"Damysos.GaussianEPulse","text":"GaussianEPulse{T<:Real}\n\nRepresents spacially homogeneous, linearly polarized pulse with Gaussian envelope. \n\nMathematical form\n\nThe form of the electric field is given by\n\nvecE(t) = vecE_0 sin(omega t+phi) e^-t^2  sigma^2\n\nwhere vecE_0=E_0(cosvarphivece_x + sinvarphivece_y). \n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.GeneralTwoBand","page":"Home","title":"Damysos.GeneralTwoBand","text":"GeneralTwoBand{T} <: Hamiltonian{T}\n\nSupertype of all 2x2 Hamiltonians with all matrixelements via dispatch.\n\nIdea\n\nThe idea is that all Hamiltonians of the form\n\nhatH = vech(veck)cdotvecsigma\n\ncan be diagonalized analytically and hence most desired matrixelements such as velocities or dipoles can be expressed solely through \n\nvech(veck)=h_x(veck)h_y(veck)h_z(veck)\n\nand its derivatives with respect to k_mu. Any particular Hamiltonian deriving form GeneralTwoBand{T} must then only implement vech(veck) and its derivatives.\n\nSee also\n\nGappedDirac\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.LinearChunked","page":"Home","title":"Damysos.LinearChunked","text":"LinearChunked{T}\n\nRepresents an integration strategy for k-space via simple midpoint sum.\n\nFields\n\nkchunksize::T: number of k-points in one chunk. Every task/worker gets one chunk. \nalgorithm::SciMLBase.BasicEnsembleAlgorithm: algorithm for the EnsembleProblem\n\nExamples\n\njulia> solver = LinearChunked(256,EnsembleThreads())\nLinearChunked{Int64}(256, EnsembleThreads())\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.Occupation","page":"Home","title":"Damysos.Occupation","text":"Occupation{T<:Real} <: Observable{T}\n\nHolds time series data of the occupation computed from the density matrix.\n\nOnly the conduction band occupation rho_cc(t) is stored since Trrho(t)=1\n\nFields\n\ncbocc::Vector{T}: time-dependent conduction band occupation rho_cc(t)\n\nSee also\n\nVelocity\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.Simulation","page":"Home","title":"Damysos.Simulation","text":"Simulation{T}(l, df, p, obs, us, d[, id, datapath, plotpath])\n\nRepresents a simulation with all physical and numerical parameters specified.\n\nFields\n\nl::Liouvillian{T}: describes physical system via Liouville operator\ndf::DrivingField{T}: laser field driving the system\np::NumericalParameters{T}: all numerical parameters of the system\nobs::Vector{Observable{T}}: physical observables to be computed\nus::UnitScaling{T}: time- and lengthscale linking dimensionless units to SI units\nid::String: identifier of the Simulation\ndatapath::String: path to save computed observables and simulation metadata\nplotpath::String: path to savee automatically generated plots\n\nSee also\n\nEnsemble, TwoBandDephasingLiouvillian, UnitScaling, Velocity, Occupation, GaussianAPulse\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.TwoBandDephasingLiouvillian","page":"Home","title":"Damysos.TwoBandDephasingLiouvillian","text":"TwoBandDephasingLiouvillian{T<:Real} <: Liouvillian{T}\n\nRepresents a system with a two-band Hamiltonian and T_2 dephasing.\n\nSee also\n\nGappedDirac, GeneralTwoBand\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.UnitScaling","page":"Home","title":"Damysos.UnitScaling","text":"UnitScaling(timescale,lengthscale)\n\nRepresents a physical length- and time-scale used for non-dimensionalization of a system.\n\nExamples\n\njulia> using Unitful; us = UnitScaling(u\"1.0s\",u\"1.0m\")\nUnitScaling:\n timescale: 1.0e15 fs\n lengthscale: 1.0e9 nm\n\n\n\nFurther information\n\nSee here\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.Velocity","page":"Home","title":"Damysos.Velocity","text":"Velocity{T<:Real} <: Observable{T}\n\nHolds time series data of the physical velocity computed from the density matrix.\n\nThe velocity is computed via\n\nvecv(t) = Tr rho(t) fracpartial Hpartialveck\n            = rho_cc(t) vecv_cc(t)  + rho_cv(t) vecv_vc(t) \n            + rho_vv(t) vecv_vv(t)  + rho_vc(t) vecv_cv(t) \n\nFields\n\nvx::Vector{T}: total velocity in x-direction. \nvxintra::Vector{T}: rho_cc(t) v^x_cc(t)  + rho_vv(t) v^x_vv(t)\nvxinter::Vector{T}: rho_cv(t) v^x_vc(t)  + rho_vc(t) v^x_cv(t)\nvy::Vector{T}: total velocity in y-direction. \nvyintra::Vector{T}: rho_cc(t) v^y_cc(t)  + rho_vv(t) v^y_vv(t)\nvyinter::Vector{T}: rho_cv(t) v^y_vc(t)  + rho_vc(t) v^y(t) _cv(t)\n\nSee also\n\nOccupation\n\n\n\n\n\n","category":"type"},{"location":"index.html#Damysos.define_functions-Tuple{Simulation}","page":"Home","title":"Damysos.define_functions","text":"define_functions(sim[, solver])\n\nHardcode the functions needed to run the Simulation. \n\nArguments\n\nsim::Simulation: contains physical & numerical information (see Simulation)\nsolver: strategy for integrating in k-space. Defaults to LinearChunked)\n\nReturns\n\nVector of functions used by run!.\n\nSee also\n\nSimulation, run!, LinearChunked\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dx_cc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dx_cc","text":"dx_cc(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ+|x|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dx_cc(h,1.0,-1.0)\n-0.10566243270259357\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dx_cv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dx_cv","text":"dx_cv(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ+|x|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dx_cv(h,1.0,-1.0)\n-0.0610042339640731 - 0.22767090063073978im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dx_vc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dx_vc","text":"dx_vc(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ-|x|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dx_vc(h,1.0,-1.0)\n-0.0610042339640731 + 0.22767090063073978im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dx_vv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dx_vv","text":"dx_vv(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ-|x|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dx_vv(h,1.0,-1.0)\n0.10566243270259357\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dy_cc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dy_cc","text":"dy_cc(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ+|y|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dy_cc(h,1.0,-1.0)\n-0.10566243270259357\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dy_cv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dy_cv","text":"dy_cv(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ+|y|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dy_cv(h,1.0,-1.0)\n-0.22767090063073978 - 0.0610042339640731im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dy_vc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dy_vc","text":"dy_vc(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ-|y|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dy_vc(h,1.0,-1.0)\n-0.22767090063073978 + 0.0610042339640731im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.dy_vv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.dy_vv","text":"dy_vv(h,kx,ky)\n\nReturns the dipole operator matrix element ⟨ψ-|y|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); dy_vv(h,1.0,-1.0)\n0.10566243270259357\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.hvec-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.hvec","text":"hvec(h,kx,ky)\n\nReturns vech(veck) defining the Hamiltonian at veck=k_xk_y.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.run!","page":"Home","title":"Damysos.run!","text":"run!(sim, functions[, solver]; kwargs...)\n\nRun a simulation.\n\nArguments\n\nsim::Simulation: contains physical & numerical information (see Simulation)\nfunctions: needed by the solver/integrator (see define_functions).\nsolver: strategy for integrating in k-space. Defaults to LinearChunked)\n\nKeyword Arguments\n\nsavedata::Bool: save observables and simulation to disk after completion\nplotdata::Bool: create default plots and save them to disk after completion\n\nReturns\n\nThe observables obtained from the simulation.\n\nSee also\n\nSimulation, define_functions, LinearChunked\n\n\n\n\n\n","category":"function"},{"location":"index.html#Damysos.vx_cc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vx_cc","text":"vx_cc(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ+|vx|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vx_cc(h,1.0,-1.0)\n0.5773502691896258\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.vx_cv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vx_cv","text":"vx_cv(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ+|vx|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vx_cv(h,1.0,-1.0)\n0.7886751345948129 - 0.21132486540518708im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.vx_vc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vx_vc","text":"vx_vc(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ-|vx|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vx_vc(h,1.0,-1.0)\n0.7886751345948129 + 0.21132486540518708im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.vx_vv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vx_vv","text":"vx_vv(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ-|vx|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vx_vv(h,1.0,-1.0)\n-0.5773502691896258\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.vy_cc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vy_cc","text":"vy_cc(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ+|vy|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vy_cc(h,1.0,-1.0)\n-0.5773502691896258\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.vy_cv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vy_cv","text":"vy_cv(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ+|vy|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vy_cv(h,1.0,-1.0)\n0.21132486540518708 - 0.7886751345948129im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.vy_vc-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vy_vc","text":"vy_vc(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ-|vy|ψ+⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vy_vc(h,1.0,-1.0)\n0.21132486540518708 + 0.7886751345948129im\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.vy_vv-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.vy_vv","text":"vy_vv(h,kx,ky)\n\nReturns the velocity operator matrix element ⟨ψ-|vy|ψ-⟩ at veck=k_xk_y.\n\nExample\n\njulia> h = GappedDirac(1.0); vy_vv(h,1.0,-1.0)\n0.5773502691896258\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.Δϵ-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.Δϵ","text":"Δϵ(h,kx,ky)\n\nReturns the band energy (valence & conduction) difference at veck=k_xk_y.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Damysos.ϵ-Tuple{GeneralTwoBand, Any, Any}","page":"Home","title":"Damysos.ϵ","text":"ϵ(h,kx,ky)\n\nReturns the eigenenergy of the positive (conduction band) state at veck=k_xk_y.\n\n\n\n\n\n","category":"method"}]
}
